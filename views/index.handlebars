<div class="page-header">
    <div class="logo-section">
        <img src="/img/pusa.png" alt="DLSU PUSA" class="page-logo">
    </div>
     <div>
    Welcome, {{user.name}}!
    </div>
    <div class="nav-buttons">
        <a class="icon-circle" id="profileBtn" aria-label="Home" href="/main">
          <img src="/img/dashboard.png" alt="Profile" class="circle-icon"> 
        </a>
        <button class="btn-outline active" id="furAdoptionBtn">Fur Adoption</button>
        <div class="dropdown">
            <button class="icon-circle" id="menuBtn" aria-label="Menu">
                <img src="/img/menu.png" alt="Menu" class="menu-icon">
            </button>
            <div class="dropdown-content" id="dropdownMenu">
                 <a href="/myprofile" class="dropdown-item">
                    <span class="dropdown-icon"></span>
                    Profile Settings
                  </a>
                <a href="/about" class="dropdown-item">
                    <span class="dropdown-icon"></span>
                    About PUSA
                </a>
                {{#if isAdmin}}
                <hr class="dropdown-separator">
                <div class="dropdown-item admin-section-title">
                    <span class="dropdown-icon"></span>
                    Admin Panel
                </div>
                <a href="/adminadoptionrequest" class="dropdown-item" id="adminAdoptionRequests">
                    <span class="dropdown-icon"></span>
                    Adoption Requests
                </a>
                <a href="/admin/trainer-users" class="dropdown-item" id="adminTrainerUsers">
                    <span class="dropdown-icon"></span>
                    Manage Trainers
                </a>
                <a href="/admin/volunteer-users" class="dropdown-item" id="adminVolunteerUsers">
                    <span class="dropdown-icon"></span>
                    Manage Volunteers
                </a>
                <a href="/admin/cats" class="dropdown-item" id="adminCats">
                    <span class="dropdown-icon"></span>
                    Manage Cats
                </a>
                {{/if}}
                <a href="#" class="dropdown-item" id="signOutBtn">
                    <span class="dropdown-icon"></span>
                    Sign Out
                </a>
            </div>
        </div>
    </div>
</div>

<div class="calendar-nav-group">
  <button class="nav-btn" id="prevWeek" type="button">
    <img src="/img/back.png" alt="Previous Week" class="nav-icon">
  </button>
  <button class="btn" id="todayBtn" type="button">Today</button>
  <button class="nav-btn" id="nextWeek" type="button">
    <img src="/img/back.png" alt="Next Week" class="nav-icon nav-icon-flip">
  </button>
</div>

<div class="scheduler-container">
  <div class="week-calendar">
    <div class="week-header">
      <div class="time-gutter"></div>
      {{#each weekDays}}
      <div class="day-header {{#if isToday}}today{{/if}}">
        {{#if isToday}}
          <div class="today-rect"></div>
        {{/if}}
        <div class="day-name">{{dayName}}</div>
        <div class="day-number">{{day}}</div>
        {{#if isToday}}<div class="today-indicator"></div>{{/if}}
      </div>
      {{/each}}
    </div>
    <div class="time-grid">
      <div class="time-column">
        {{#each timeSlots}}
        <div class="time-slot">
          <span class="time-label">{{this}}</span>
        </div>
        {{/each}}
      </div>
      <div class="week-grid">
        {{#each weekDays}}
        <div class="day-column" data-date="{{dateString}}">
          {{#each ../timeSlots}}
          <div class="time-cell" data-time="{{this}}">
            <div class="grid-line"></div>
          </div>
          {{/each}}
          {{#each events}}
          {{/each}}
        </div>
        {{/each}}
      </div>
    </div>
    <div class="slot-cards-section">
      {{#each weekDays}}
        <div class="day-slot-cards horizontal-slot-cards" data-day="{{dayName}}">
          {{#unless (eq dayName "SUN")}}
          <div class="slot-cards-flex-row">
            <div class="slot-card nook-card" data-day="{{dayName}}">
              <div class="slot-card-header nook-header">
                Nook
                <span class="slot-card-time">2:00 - 3:00 PM</span>
              </div>
              <div class="slot-card-body slot-card-body-column">
                <span class="slot-card-trainer" data-day="{{dayName}}">No trainer assigned</span>
                <span class="slot-card-volunteer" data-day="{{dayName}}">Waiting for trainer</span>
              </div>
              <div class="slot-card-flexfill"></div>
              <div class="slot-card-view">
                <img class="mouse-icon1" src="/img/mouse1.png" alt="Mouse icon" />Click to view
              </div>
            </div>
            <div class="slot-card feeding-card" data-day="{{dayName}}">
              <div class="slot-card-header feeding-header">
                Feeding
                <span class="slot-card-time">4:00 - 6:00 PM</span>
              </div>
              <div class="slot-card-body slot-card-body-column">
                <span class="slot-card-trainer" data-day="{{dayName}}">No trainer assigned</span>
                <span class="slot-card-volunteer" data-day="{{dayName}}">0/5 reserved</span>
              </div>
              <div class="slot-card-flexfill"></div>
              <div class="slot-card-view">
                <img class="mouse-icon" src="/img/mouse1.png" alt="Mouse icon" />Click to view
              </div>
            </div>
          </div>
          {{/unless}}
          {{#if isToday}}
            {{#if (eq dayName "SUN")}}
              <div class="signup-message">Sign-Ups open today!</div>
            {{/if}}
          {{else}}
            {{#if (eq dayName "SUN")}}
              <div class="signup-message">Sign-Ups is open only on Sunday!</div>
            {{/if}}
          {{/if}}
        </div>
      {{/each}}
    </div>
  </div>
</div>

<!-- Slot Details Modal -->
<div id="slotModal" class="modal" style="display: none;">
  <div class="modal-content">
    <span class="close" id="closeModal">&times;</span>
    <div id="modalBody"></div>
  </div>
</div>

<!-- Link to external CSS for modal styles -->
<link rel="stylesheet" href="/css/modal-slot-card.css">

<script src="/js/script.js"></script>
<script>
// Dynamic slot management system
let slotData = {};

// Initialize slot data for each day
document.addEventListener('DOMContentLoaded', function() {
  const weekDays = ['MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT'];
  
  weekDays.forEach(day => {
    slotData[day] = {
      nook: {
        trainer: null,
        volunteers: [],
        maxVolunteers: 3,
        status: 'available'
      },
      feeding: {
        trainer: null,
        volunteers: [],
        maxVolunteers: 5,
        status: 'available'
      }
    };
  });

  // Load existing reservations from server data
  loadServerData();
  
  // Show messages if any
  showMessage();

  // Modal logic
  const modal = document.getElementById('slotModal');
  const closeModal = document.getElementById('closeModal');
  const modalBody = document.getElementById('modalBody');

  document.querySelectorAll('.slot-card-view').forEach(function(btn) {
    btn.addEventListener('click', function(e) {
      e.preventDefault();
      e.stopPropagation();
      
      const slotCard = btn.closest('.slot-card');
      const dayElement = slotCard.closest('.day-slot-cards');
      const currentDay = dayElement.getAttribute('data-day');
      
      if (slotCard && slotCard.classList.contains('feeding-card')) {
        showFeedingModal(currentDay);
      } else {
        showNookModal(currentDay);
      }
      
      modal.style.display = 'flex';
    });
  });

  // Close modal functionality
  closeModal.addEventListener('click', function() {
    modal.style.display = 'none';
  });

  window.addEventListener('click', function(e) {
    if (e.target === modal) {
      modal.style.display = 'none';
    }
  });
});

function showNookModal(day) {
  const modalBody = document.getElementById('modalBody');
  const nookData = slotData[day].nook;
  const currentUser = '{{user.name}}';
  const isUserReserved = nookData.volunteers.includes(currentUser);
  const availableSpots = nookData.maxVolunteers - nookData.volunteers.length;
  
  let trainerInfo = nookData.trainer || 'No trainer assigned';
  let statusText = availableSpots > 0 ? 'Available' : 'Full';
  let statusColor = availableSpots > 0 ? '#2dbe60' : '#F44336';
  
  // Generate volunteer list HTML
  let volunteersHTML = '';
  if (nookData.volunteers.length > 0) {
    volunteersHTML = nookData.volunteers.map(volunteer => 
      `<div class="modal-slot-vol">${volunteer}</div>`
    ).join('');
  } else {
    volunteersHTML = '<div style="color: #6c7a89; font-style: italic;">No volunteers signed up yet</div>';
  }
  
  // Generate button HTML
  let buttonHTML = '';
  const isUserTrainer = nookData.trainer === currentUser;
  
  if (isUserReserved) {
    if (isUserTrainer) {
      buttonHTML = `
        <button class="modal-slot-reserved-btn" style="background: #FFD700;">You're the Trainer</button>
        <button id="cancelNookBtn" class="modal-slot-cancel-btn" onclick="cancelNookReservation('${day}')">Cancel Trainer Slot</button>
      `;
    } else {
      buttonHTML = `
        <button class="modal-slot-reserved-btn">You're Registered</button>
        <button id="cancelNookBtn" class="modal-slot-cancel-btn" onclick="cancelNookReservation('${day}')">Cancel Reservation</button>
      `;
    }
  } else if (availableSpots > 0) {
    const hasTrainer = nookData.trainer && nookData.trainer !== 'No trainer assigned';
    const buttonText = hasTrainer ? 'Join as Volunteer' : 'Reserve as Trainer';
    buttonHTML = `<button id="reserveNookBtn" class="modal-slot-reserve-btn" onclick="makeNookReservation('${day}')">${buttonText}</button>`;
  } else {
    buttonHTML = `<button class="modal-slot-reserved-btn" style="background: #6c7a89;">Slot Full</button>`;
  }
  
  modalBody.innerHTML = `
    <div class="modal-slot-card">
      <div class="modal-slot-header">
        <div class="modal-slot-title">Nook</div>
        <div class="modal-slot-time">2:00 - 3:00 PM</div>
      </div>
      <div class="modal-slot-content">
        <div class="modal-slot-row modal-slot-row-user">
          <div class="modal-slot-user-info">
            <div class="modal-slot-user">${trainerInfo}</div>
          </div>
          <div class="modal-slot-status">
            <div class="modal-slot-status-dot" style="background: ${statusColor};"></div>
            <div class="modal-slot-status-text" style="color: ${statusColor};">${statusText}</div>
          </div>
        </div>
        <div class="modal-slot-role">Open to volunteers</div>
        <div class="modal-slot-row modal-slot-row-volunteers">
          <div class="modal-slot-vol-label">Registered Volunteers:</div>
          <div class="modal-slot-vol-count">${nookData.volunteers.length}/${nookData.maxVolunteers} reserved</div>
        </div>
        <div class="modal-slot-volunteers">
          ${volunteersHTML}
        </div>
        <div id="modalButtons" class="modal-slot-buttons">
          ${buttonHTML}
        </div>
      </div>
    </div>
  `;
}

function showFeedingModal(day) {
  const modalBody = document.getElementById('modalBody');
  const feedingData = slotData[day].feeding;
  const currentUser = '{{user.name}}';
  const isUserReserved = feedingData.volunteers.includes(currentUser);
  const availableSpots = feedingData.maxVolunteers - feedingData.volunteers.length;
  
  let trainerInfo = feedingData.trainer || 'No trainer assigned';
  let statusText = availableSpots > 0 ? 'Available' : 'Full';
  let statusColor = availableSpots > 0 ? '#2dbe60' : '#F44336';
  
  // Generate volunteer list HTML
  let volunteersHTML = '';
  if (feedingData.volunteers.length > 0) {
    volunteersHTML = feedingData.volunteers.map(volunteer => 
      `<div class="modal-slot-vol">${volunteer}</div>`
    ).join('');
  } else {
    volunteersHTML = '<div style="color: #6c7a89; font-style: italic;">No volunteers signed up yet</div>';
  }
  
  // Generate button HTML
  let buttonHTML = '';
  const isUserTrainer = feedingData.trainer === currentUser;
  
  if (isUserReserved) {
    if (isUserTrainer) {
      buttonHTML = `
        <button class="modal-slot-reserved-btn" style="background: #FFD700;">You're the Trainer</button>
        <button id="cancelBtn" class="modal-slot-cancel-btn" onclick="cancelReservation('${day}')">Cancel Trainer Slot</button>
      `;
    } else {
      buttonHTML = `
        <button class="modal-slot-reserved-btn">You're Registered</button>
        <button id="cancelBtn" class="modal-slot-cancel-btn" onclick="cancelReservation('${day}')">Cancel Reservation</button>
      `;
    }
  } else if (availableSpots > 0) {
    const hasTrainer = feedingData.trainer && feedingData.trainer !== 'No trainer assigned';
    const buttonText = hasTrainer ? 'Join as Volunteer' : 'Reserve as Trainer';
    buttonHTML = `<button id="reserveBtn" class="modal-slot-reserve-btn" onclick="makeReservation('${day}')">${buttonText}</button>`;
  } else {
    buttonHTML = `<button class="modal-slot-reserved-btn" style="background: #6c7a89;">Slot Full</button>`;
  }
  
  modalBody.innerHTML = `
    <div class="modal-slot-card">
      <div class="modal-slot-header feeding-modal-header">
        <div class="modal-slot-title">Feeding</div>
        <div class="modal-slot-time">4:00 - 6:00 PM</div>
      </div>
      <div class="modal-slot-content">
        <div class="modal-slot-row modal-slot-row-user">
          <div class="modal-slot-user-info">
            <div class="modal-slot-user">${trainerInfo}</div>
          </div>
          <div class="modal-slot-status">
            <div class="modal-slot-status-dot" style="background: ${statusColor};"></div>
            <div class="modal-slot-status-text" style="color: ${statusColor};">${statusText}</div>
          </div>
        </div>
        <div class="modal-slot-role">Open to volunteers</div>
        <div class="modal-slot-row modal-slot-row-volunteers">
          <div class="modal-slot-vol-label">Registered Volunteers:</div>
          <div class="modal-slot-vol-count">${feedingData.volunteers.length}/${feedingData.maxVolunteers} reserved</div>
        </div>
        <div class="modal-slot-volunteers">
          ${volunteersHTML}
        </div>
        <div id="modalButtons" class="modal-slot-buttons">
          ${buttonHTML}
        </div>
      </div>
    </div>
  `;
}

function makeReservation(day) {
  const currentUser = '{{user.name}}';
  const feedingData = slotData[day].feeding;
  const date = getDateForDay(day);
  
  if (feedingData.volunteers.length >= feedingData.maxVolunteers) {
    alert('This slot is already full.');
    return;
  }
  
  if (feedingData.volunteers.includes(currentUser)) {
    alert('You are already signed up for this day.');
    return;
  }

  if (confirm('Do you want to reserve this feeding slot?')) {
    const currentWeek = getCurrentWeek();
    window.location.href = `/main?week=${currentWeek}&action=reserve&type=feeding&day=${day}&date=${date}`;
  }
}

function cancelReservation(day) {
  const currentUser = '{{user.name}}';
  const feedingData = slotData[day].feeding;
  const date = getDateForDay(day);
  
  const userIndex = feedingData.volunteers.indexOf(currentUser);
  if (userIndex === -1) {
    alert('No reservation found to cancel.');
    return;
  }

  if (confirm('Do you want to cancel your feeding slot reservation?')) {
    const currentWeek = getCurrentWeek();
    window.location.href = `/main?week=${currentWeek}&action=cancel&type=feeding&day=${day}&date=${date}`;
  }
}

function updateSlotDisplay(day) {
  const feedingData = slotData[day].feeding;
  const availableSpots = feedingData.maxVolunteers - feedingData.volunteers.length;
  
  // Update feeding card display
  const feedingCard = document.querySelector(`.feeding-card[data-day="${day}"]`);
  if (feedingCard) {
    const trainerSpan = feedingCard.querySelector('.slot-card-trainer');
    const volunteerSpan = feedingCard.querySelector('.slot-card-volunteer');
    
    if (feedingData.trainer) {
      trainerSpan.textContent = feedingData.trainer;
      volunteerSpan.textContent = `${feedingData.volunteers.length}/${feedingData.maxVolunteers} volunteers`;
    } else {
      trainerSpan.textContent = 'No trainer assigned';
      if (availableSpots > 0) {
        volunteerSpan.textContent = `${feedingData.volunteers.length}/${feedingData.maxVolunteers} volunteers`;
      } else {
        volunteerSpan.textContent = 'Full';
      }
    }
  }
}

// Helper function to get date for a day abbreviation
function getDateForDay(day) {
  const dayColumns = document.querySelectorAll('.day-column');
  const dayHeaders = document.querySelectorAll('.day-header');
  
  for (let i = 0; i < dayHeaders.length; i++) {
    const dayName = dayHeaders[i].querySelector('.day-name').textContent;
    if (dayName === day) {
      return dayColumns[i].getAttribute('data-date');
    }
  }
  return null;
}

// Load existing reservations from server data
function loadServerData() {
  try {
    // Parse server data passed from template
    const feedingSignups = JSON.parse('{{{feedingSignups}}}' || '[]');
    const nookSignups = JSON.parse('{{{nookSignups}}}' || '[]');
    
    console.log('Loading server data:', { feedingSignups, nookSignups });
    
    // Update feeding slots
    feedingSignups.forEach(signup => {
      const day = signup.slot_day;
      if (slotData[day] && slotData[day].feeding) {
        // Set trainer if this signup is marked as trainer
        if (signup.is_trainer) {
          slotData[day].feeding.trainer = signup.volunteer_name;
          console.log(`Set feeding trainer for ${day}: ${signup.volunteer_name}`);
        }
        // Add to volunteers list if not already there
        if (!slotData[day].feeding.volunteers.includes(signup.volunteer_name)) {
          slotData[day].feeding.volunteers.push(signup.volunteer_name);
        }
      }
    });
    
    // Update nook slots
    nookSignups.forEach(signup => {
      const day = signup.slot_day;
      if (slotData[day] && slotData[day].nook) {
        // Set trainer if this signup is marked as trainer
        if (signup.is_trainer) {
          slotData[day].nook.trainer = signup.volunteer_name;
          console.log(`Set nook trainer for ${day}: ${signup.volunteer_name}`);
        }
        // Add to volunteers list if not already there
        if (!slotData[day].nook.volunteers.includes(signup.volunteer_name)) {
          slotData[day].nook.volunteers.push(signup.volunteer_name);
        }
      }
    });
    
    console.log('Final slotData:', slotData);
    
    // Update displays
    const weekDays = ['MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT'];
    weekDays.forEach(day => {
      updateSlotDisplay(day);
      updateNookDisplay(day);
    });
  } catch (error) {
    console.error('Error loading server data:', error);
  }
}

// Nook reservation functions
function makeNookReservation(day) {
  const currentUser = '{{user.name}}';
  const nookData = slotData[day].nook;
  const date = getDateForDay(day);
  
  if (nookData.volunteers.length >= nookData.maxVolunteers) {
    alert('This slot is already full.');
    return;
  }
  
  if (nookData.volunteers.includes(currentUser)) {
    alert('You are already signed up for this day.');
    return;
  }

  if (confirm('Do you want to reserve this nook slot?')) {
    const currentWeek = getCurrentWeek();
    window.location.href = `/main?week=${currentWeek}&action=reserve&type=nook&day=${day}&date=${date}`;
  }
}

function cancelNookReservation(day) {
  const currentUser = '{{user.name}}';
  const nookData = slotData[day].nook;
  const date = getDateForDay(day);
  
  const userIndex = nookData.volunteers.indexOf(currentUser);
  if (userIndex === -1) {
    alert('No reservation found to cancel.');
    return;
  }

  if (confirm('Do you want to cancel your nook slot reservation?')) {
    const currentWeek = getCurrentWeek();
    window.location.href = `/main?week=${currentWeek}&action=cancel&type=nook&day=${day}&date=${date}`;
  }
}

// Update nook display
function updateNookDisplay(day) {
  const nookData = slotData[day].nook;
  const availableSpots = nookData.maxVolunteers - nookData.volunteers.length;
  
  // Update nook card display
  const nookCard = document.querySelector(`.nook-card[data-day="${day}"]`);
  if (nookCard) {
    const trainerSpan = nookCard.querySelector('.slot-card-trainer');
    const volunteerSpan = nookCard.querySelector('.slot-card-volunteer');
    
    if (nookData.trainer) {
      trainerSpan.textContent = nookData.trainer;
      volunteerSpan.textContent = `${nookData.volunteers.length}/${nookData.maxVolunteers} volunteers`;
    } else {
      trainerSpan.textContent = 'No trainer assigned';
      if (availableSpots > 0) {
        volunteerSpan.textContent = `${nookData.volunteers.length}/${nookData.maxVolunteers} volunteers`;
      } else {
        volunteerSpan.textContent = 'Full';
      }
    }
  }
}

// Helper function to get current week
function getCurrentWeek() {
  const urlParams = new URLSearchParams(window.location.search);
  return urlParams.get('week') || new Date().toISOString().slice(0, 10);
}

// Show success/error messages
function showMessage() {
  const urlParams = new URLSearchParams(window.location.search);
  const message = urlParams.get('success') || urlParams.get('error');
  
  if (message) {
    let messageText = '';
    switch(message) {
      case 'reserved': messageText = 'Slot reserved successfully!'; break;
      case 'reserved_as_trainer': messageText = 'Slot reserved successfully! You are now the trainer for this slot.'; break;
      case 'cancelled': messageText = 'Reservation cancelled successfully!'; break;
      case 'already_signed': messageText = 'You are already signed up for this day.'; break;
      case 'slot_full': messageText = 'This slot is already full.'; break;
      case 'not_found': messageText = 'No reservation found to cancel.'; break;
      case 'server_error': messageText = 'Server error. Please try again.'; break;
      default: messageText = message;
    }
    
    alert(messageText);
    
    // Clean URL by removing message parameters
    const cleanUrl = window.location.pathname + '?week=' + getCurrentWeek();
    window.history.replaceState({}, '', cleanUrl);
  }
}
</script>